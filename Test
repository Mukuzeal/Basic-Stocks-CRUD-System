from kivy.app import App
from kivy.uix.widget import Widget
from kivy.uix.label import Label
from kivy.graphics import Color, Ellipse
from kivy.clock import Clock
from kivy.core.window import Window
import random

Window.size = (800, 600)
Window.clearcolor = (0.05, 0.05, 0.05, 1)  # dark gray background


class Target(Widget):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.radius = 20
        self.max_radius = 40
        self.min_radius = 10
        self.growing = True

        # Random position
        self.center = (
            random.randint(100, Window.width - 100),
            random.randint(100, Window.height - 100)
        )

        with self.canvas:
            self.color = Color(1, 0, 0, 1)
            self.circle = Ellipse(pos=(self.center_x - self.radius, self.center_y - self.radius),
                                  size=(self.radius * 2, self.radius * 2))

        Clock.schedule_interval(self.update, 1 / 60)

    def update(self, dt):
        # Grow then shrink
        if self.growing:
            self.radius += 0.5
            if self.radius >= self.max_radius:
                self.growing = False
        else:
            self.radius -= 0.8
            if self.radius <= self.min_radius:
                if self.parent:
                    self.parent.remove_widget(self)
                Clock.unschedule(self.update)
                return

        # Update circle position and size
        self.circle.size = (self.radius * 2, self.radius * 2)
        self.circle.pos = (self.center_x - self.radius, self.center_y - self.radius)

    def on_touch_down(self, touch):
        # Detect hit
        dx = touch.x - self.center_x
        dy = touch.y - self.center_y
        if (dx ** 2 + dy ** 2) ** 0.5 <= self.radius:
            if self.parent:
                self.parent.hit_target(self)
            return True
        return super().on_touch_down(touch)


class AimTrainer(Widget):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.score = 0
        self.score_label = Label(text="Score: 0",
                                 pos=(10, Window.height - 40),
                                 font_size="24sp")
        self.add_widget(self.score_label)
        Clock.schedule_interval(self.spawn_target, 1.0)

    def spawn_target(self, dt):
        target = Target()
        self.add_widget(target)

    def hit_target(self, target):
        self.score += 1
        self.score_label.text = f"Score: {self.score}"
        self.remove_widget(target)


class AimTrainerApp(App):
    def build(self):
        return AimTrainer()


if __name__ == "__main__":
    AimTrainerApp().run()