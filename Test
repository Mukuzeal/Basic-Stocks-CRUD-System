
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.properties import NumericProperty, ObjectProperty, ListProperty, StringProperty
from kivy.clock import Clock
from kivy.graphics import Color, Rectangle
from kivy.core.window import Window
from kivy.uix.image import Image
import random

Window.size = (400, 600)
Window.clearcolor = (0.5, 0.8, 1, 1)  # sky blue


class Bird(Image):
    velocity_y = NumericProperty(0)
    gravity = -0.4
    flap_strength = 7

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.source = "bird.png"  # <- replace with your own image
        self.size_hint = (None, None)
        self.size = (50, 50)
        self.allow_stretch = True
        self.keep_ratio = True

    def move(self):
        self.y += self.velocity_y
        self.velocity_y += self.gravity
        if self.y < 0:
            self.y = 0
            self.velocity_y = 0

    def flap(self):
        self.velocity_y = self.flap_strength


class Pipe(Widget):
    color = ListProperty([0.2, 0.8, 0.2])  # green

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.width = 80
        self.gap_size = 150
        self.x = Window.width
        self.reset_pipe()

    def reset_pipe(self):
        self.gap_y = random.randint(150, Window.height - 150)
        self.x = Window.width

    def move(self):
        self.x -= 3
        if self.x + self.width < 0:
            self.reset_pipe()

    def draw(self):
        self.canvas.clear()
        with self.canvas:
            Color(*self.color)
            # top pipe
            Rectangle(pos=(self.x, self.gap_y + self.gap_size / 2),
                      size=(self.width, Window.height - (self.gap_y + self.gap_size / 2)))
            # bottom pipe
            Rectangle(pos=(self.x, 0),
                      size=(self.width, self.gap_y - self.gap_size / 2))


class Game(Widget):
    bird = ObjectProperty(None)
    pipes = ListProperty([])
    score = NumericProperty(0)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.bird = Bird(pos=(100, Window.height / 2))
        self.add_widget(self.bird)

        # Create pipes
        for i in range(3):
            pipe = Pipe()
            pipe.x += i * 200
            self.pipes.append(pipe)
            self.add_widget(pipe)

        # Schedule updates
        Clock.schedule_interval(self.update, 1 / 60)

    def on_touch_down(self, touch):
        self.bird.flap()

    def update(self, dt):
        self.bird.move()

        for pipe in self.pipes:
            pipe.move()
            pipe.draw()

            # Check collision
            if self.collides(self.bird, pipe):
                self.reset_game()

            # Score update
            if pipe.x + pipe.width < self.bird.x and not hasattr(pipe, 'scored'):
                self.score += 1
                print(f"Score: {self.score}")
                pipe.scored = True
            elif pipe.x + pipe.width >= self.bird.x:
                pipe.scored = False

    def collides(self, bird, pipe):
        bx, by = bird.pos
        bw, bh = bird.size
        # Check if bird overlaps with pipe
        if (bx + bw > pipe.x and bx < pipe.x + pipe.width) and (
            by < pipe.gap_y - pipe.gap_size / 2 or by + bh > pipe.gap_y + pipe.gap_size / 2
        ):
            return True
        return False

    def reset_game(self):
        for pipe in self.pipes:
            pipe.x = Window.width
        self.bird.pos = (100, Window.height / 2)
        self.bird.velocity_y = 0
        self.score = 0


class FlappyApp(App):
    def build(self):
        return Game()


if __name__ == "__main__":
    FlappyApp().run()